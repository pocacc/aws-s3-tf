name: "backstage_deploy"
on:
  push:
    branches:
      - master
  pull_request:
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: ERROR


jobs:
  backstage_deploy:
    name: 'AWS - S3'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      
      - name: Get Repo Name
        id: get_repo_name
        run: echo "::set-output name=REPO_NAME::$(basename $GITHUB_REPOSITORY)"
  
      - name: Get Org Name
        id: get_org_name
        run: echo "::set-output name=ORG_NAME::$(echo $GITHUB_REPOSITORY | cut -d / -f 1)"

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ values.role_to_assume }}
          aws-region: ${{ values.region }}
          role-session-name: ${{ values.role_session_name }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=ic-telefonica-tf-states" -backend-config="key=${{ values.environment }}/${{ values.bucket }}.state" -backend-config="region=${{ values.region }}"

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=true
